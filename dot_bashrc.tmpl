# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=100000

# Avoid duplicates
HISTCONTROL=ignoredups:erasedups
# When the shell exits, append to the history file instead of overwriting it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

PROMPT_COMMAND=__prompt_command

__prompt_command() {
  # After each command, append to the history file and reread it
  history -a
  history -c
  history -r
}

__saml_ps1() {
  local rolename=$(grep x_principal_arn ~/.aws/credentials | sed -E 's/.*assumed-role\/(.*)\/.*/\1/')
  local expire_time=$(grep x_security_token_expires ~/.aws/credentials | sed -E 's/.* = (.*)/\1/')
  local expire_time_unix=$(date -d ${expire_time} +%s)
  local now_unix=$(date +%s)
  local BLUE_BACK='\[\e[1;37;104m\]'

  if [ ${expire_time_unix} -ge ${now_unix} ]; then
      echo "[AWS role: ${rolename}]"
  fi
}


if [ "$color_prompt" = yes ]; then
    # PS1='\[\033[1;35m\]$(date +%Y/%m/%d_%H:%M:%S)\[\033[0m\] \[\033[33m\]\H:\w \n\[\033[1;37;104m\]$(__saml_ps1)\[\033[0m\]\n\[\033[0m\][\u@ \W]\[\033[35m\]$(__git_ps1)\[\033[00m\]\$ '
    PS1='\[\033[1;35m\]$(date +%Y/%m/%d_%H:%M:%S)\[\033[0m\] \[\033[33m\]\H:\w \[\033[0m\]\n\[\033[0m\][\u@ \W]\[\033[35m\]$(__git_ps1)\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
# exa
if [ -x "$(command -v exa)" ]; then
    alias ll='exa -al'
else
    alias ll='ls -alFh'
fi
alias la='ls -A'
alias l='ls -CF'

alias g='git'
alias ga='git add'
alias gd='git diff'
alias gs='git status'
alias gco='git checkout'
alias gc='git commit'

# docker
alias dps='docker ps'
alias dpsa='docker ps -a'
alias dim='docker images'
alias dc='docker-compose'
alias k='kubectl'

# aws
alias lls='aws s3 ls '

# bat
if [ -x "$(command -v bat)" ]; then
    alias cat='bat'
fi

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

source ~/.git-prompt.sh
source ~/.git-completion.bash

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fda - including hidden directories
fda() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

# fh - repeat history
runcmd (){ perl -e 'ioctl STDOUT, 0x5412, $_ for split //, <>' ; }

fh() {
  ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -re 's/^\s*[0-9]+\s*//' | runcmd
}

# fbr - checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
fbr() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

fhq() {
  local dir
  dir=$(ghq list --full-path | fzf)
  echo "$dir"
  cd "$dir"
}

# tabc <profile name> do the profile change
tabc () {
  NAME=$1; if [ -z "$NAME" ]; then NAME="Default"; fi 
  # if you have trouble with this, change
  # "Default" to the name of your default theme
  echo -e "\033]50;SetProfile=$NAME\a"
}

# reset the terminal profile to Default  when exit from the ssh session
tab-reset() {
    NAME="Default"
    echo -e "\033]50;SetProfile=$NAME\a"
}

# selecting different terminal profile according to ssh'ing host
# tabc <profile name> do the profile change
#   1. Production profile to production server (ssh eranga@production_box) 
#   2. Staging profile to staging server(ssh eranga@staging_box) 
#   3. Other profile to any other server(test server, amazon box etc)
colorssh() {
    if [[ -n "$ITERM_SESSION_ID" ]]; then
        trap "tab-reset" INT EXIT
        if [[ "$*" =~ "kubeflow" ]]; then
            tabc kubeflow
        elif [[ "$*" =~ "devenv" ]]; then
            tabc devenv
        else
            tabc Other
        fi
    fi
    ssh $*
}

{{ if (eq .chezmoi.hostname "CMQ0TM6WH2") }}
tab-reset
alias ssh="colorssh"
{{ end }}

if [[ -x `which colordiff` ]]; then
  alias diff='colordiff -u'
else
  alias diff='diff -u'
fi

# for pipx
export PATH="$PATH:${HOME}/.local/bin"

# for go bin
export PATH="$PATH:${HOME}/go/bin"

#for krew
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# for asdf
. "$HOME/.asdf/asdf.sh"
. "$HOME/.asdf/completions/asdf.bash"

# github copilot cli
if [[ -x `which github-copilot-cli` ]]; then
  eval "$(github-copilot-cli alias -- "$0")"
fi

{{if eq .chezmoi.os "darwin"}}
alias awsp='export AWS_PROFILE=$(sed -nE "s/\[(profile )?([^]]+)\]/\2/p" ~/.aws/config | fzf)'
{{else}}
alias awsp='export AWS_PROFILE=$(sed -n "s/\[\(profile \)\?\|\]//gp" ~/.aws/config | fzf)'
{{end}}

if [ -f ~/.env ]
then
  export $(cat ~/.env | sed 's/#.*//g' | xargs)
fi

if [ -f ~/.bashrc_work ]
then
  source ~/.bashrc_work
fi

